// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  pfpUrl    String?
  passwordHash  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  comments Comment[]
  sentNotifications Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationRecipient")
  @@map("users")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // null -> visible, not-null -> soft-delete

  // relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  parentId String?
  parent Comment? @relation("Replies", fields: [parentId], references: [id])
  replies Comment[] @relation("Replies")
  
  notifications Notification[]

  @@map("comments")
}

model Notification {
  id        String   @id @default(uuid())
  type      String   // "reply", "mention", etc. (for future expansion)
  message   String   // e.g., "John replied to your comment"
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // relations
  recipientId String
  recipient   User   @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  
  senderId    String
  sender      User   @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  
  commentId   String
  comment     Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("notifications")
}